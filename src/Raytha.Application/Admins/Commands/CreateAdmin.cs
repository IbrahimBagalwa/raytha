using CSharpVitamins;
using FluentValidation;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Raytha.Application.Common.Interfaces;
using Raytha.Application.Common.Models;
using Raytha.Application.Common.Utils;
using Raytha.Domain.Entities;
using Raytha.Domain.Events;
using Raytha.Domain.ValueObjects;

namespace Raytha.Application.Admins.Commands;

public class CreateAdmin
{
    public record Command : LoggableRequest<CommandResponseDto<ShortGuid>>
    {
        public string FirstName { get; init; } = null!;
        public string LastName { get; init; } = null!;
        public string EmailAddress { get; init; } = null!;
        public IEnumerable<ShortGuid> Roles { get; init; } = null!;
        public bool SendEmail { get; init; }
    }

    public class Validator : AbstractValidator<Command> 
    {
        public Validator(IRaythaDbContext db)
        {
            RuleFor(x => x.FirstName).NotEmpty();
            RuleFor(x => x.LastName).NotEmpty();
            RuleFor(x => x.Roles).NotEmpty();
            RuleFor(x => x.EmailAddress).NotEmpty().EmailAddress();
            RuleFor(x => x).Custom((request, context) =>
            {
                var entity = db.Users
                    .FirstOrDefault(p => p.EmailAddress.ToLower() == request.EmailAddress.ToLower());

                if (entity != null && entity.IsAdmin)
                {
                    context.AddFailure("EmailAddress", "Another user with this email address already exists.");
                    return;
                }
            });
        }
    }

    public class Handler : IRequestHandler<Command, CommandResponseDto<ShortGuid>>
    {
        private readonly IRaythaDbContext _db;
        public Handler(IRaythaDbContext db)
        {
            _db = db;
        }
        public async Task<CommandResponseDto<ShortGuid>> Handle(Command request, CancellationToken cancellationToken)
        {
            var emailAddress = request.EmailAddress.ToLower();
            var entity = _db.Users
                .Include(p => p.AuthenticationScheme)
                .FirstOrDefault(p => p.EmailAddress.ToLower() == emailAddress);
           
            bool isNewAdmin = false;
            var autoGeneratedPassword = PasswordUtility.RandomPassword(12);
            if (entity != null && !entity.IsAdmin)
            {
                entity.IsAdmin = true;
            }
            else
            {
                var defaultToEmailAndPasswordScheme = _db.AuthenticationSchemes.First(p => p.DeveloperName == AuthenticationSchemeType.EmailAndPassword.DeveloperName);
                isNewAdmin = true;
                var salt = PasswordUtility.RandomSalt();
                var newAdminId = Guid.NewGuid();
                entity = new User
                {
                    Id = newAdminId,
                    FirstName = request.FirstName,
                    LastName = request.LastName,
                    EmailAddress = request.EmailAddress,
                    IsActive = true,
                    IsAdmin = true,
                    Salt = salt,
                    PasswordHash = PasswordUtility.Hash(autoGeneratedPassword, salt),
                    SsoId = (ShortGuid)newAdminId,
                    AuthenticationSchemeId = defaultToEmailAndPasswordScheme.Id
                };
            }

            entity.Roles = new List<Role>();
            foreach (var roleToAddId in request.Roles)
            {
                var roleToAdd = _db.Roles.First(p => p.Id == roleToAddId.Guid);
                entity.Roles.Add(roleToAdd);
            }

            entity.AddDomainEvent(new AdminCreatedEvent(entity, request.SendEmail, isNewAdmin, autoGeneratedPassword));
            
            if (isNewAdmin)
            {
                _db.Users.Add(entity);
            }

            await _db.SaveChangesAsync(cancellationToken);
            return new CommandResponseDto<ShortGuid>(entity.Id);
        }
    }
}
