using CSharpVitamins;
using FluentValidation;
using MediatR;
using Raytha.Application.Common.Interfaces;
using Raytha.Application.Common.Models;
using Raytha.Application.Common.Utils;
using Raytha.Domain.Entities;

namespace Raytha.Application.Admins.Commands;

public class CreateApiKey
{
    public record Command : LoggableRequest<CommandResponseDto<string>>
    {
        public ShortGuid UserId { get; init; }
    }

    public class Validator : AbstractValidator<Command>
    {
        public Validator(IRaythaDbContext db)
        {
            RuleFor(x => x).Custom((request, context) =>
            {
                var user = db.Users
                    .FirstOrDefault(p => p.Id == request.UserId.Guid);

                if (user == null || !user.IsAdmin)
                {
                    context.AddFailure(Constants.VALIDATION_SUMMARY, "Must add the API key to an admin user.");
                    return;
                }

                var numKeysAlready = db.ApiKeys.Count(p => p.UserId == request.UserId.Guid);
                if (numKeysAlready >= 10)
                {
                    context.AddFailure(Constants.VALIDATION_SUMMARY, "You have already hit your limit of 10 api keys per user.");
                    return;
                }
            });
        }
    }

    public class Handler : IRequestHandler<Command, CommandResponseDto<string>>
    {
        private readonly IRaythaDbContext _db;
        public Handler(IRaythaDbContext db)
        {
            _db = db;
        }
        public async Task<CommandResponseDto<string>> Handle(Command request, CancellationToken cancellationToken)
        {
            var user = _db.Users
                .First(p => p.Id == request.UserId.Guid);

            var autoGeneratedApiKey = Guid.NewGuid().ToString();

            var entity = new ApiKey
            {
                UserId = user.Id,
                ApiKeyHash = PasswordUtility.Hash(autoGeneratedApiKey)
            };

            _db.ApiKeys.Add(entity);

            await _db.SaveChangesAsync(cancellationToken);
            return new CommandResponseDto<string>(autoGeneratedApiKey);
        }
    }
}
